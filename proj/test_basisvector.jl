using PyPlot
using Printf
using DelimitedFiles
using JLD
fpath = "/Users/xiaoyu/Code/TwistedBilayerGraphene"
include(joinpath(fpath,"libs/Hoftstadter_mod_v3.jl"))

##
params = Params(dθ = 1.05π/180)
q = 25
p = 2
@printf("p/q=%d/%d\n",p,q)
hof,blk,basis = initHofstadterHoppingElements(q,p,params);


##
n0dim = size(hof.M,3)
M = reshape(hof.M,n0dim*2hof.l2,n0dim*2hof.l2)
H2 = reshape(hof.Hsq,n0dim*2hof.l2,n0dim*2hof.l2)
H = reshape(hof.H,n0dim*2hof.l2,n0dim*2hof.l2)
M = M + M' 
H2 = H2 + H2'
H = H + H'

ϵ0 = maximum(blk.Hk) / (2π * params.vf/abs(params.a1))

# how many eigenvectors to keep
F = eigen(Hermitian(M))
nstates = 2hof.l2

val1 = F.values[end-nstates+1]
val2 = F.values[end-nstates]

if val2 / val1 > 0.2  # if no significant jump in overlap matrix
    println("$(val2/val1)")
    threshold = 0.3 # threshold for states to keep
    nstates = length(F.values[F.values .> threshold])
end
println("Total number of states kept stage 1 is $nstates")
# stage 1 using H^2 to filter out states
vec = F.vectors'
vals = 1 ./ sqrt.(F.values[(end-nstates+1):end]) 
U = Diagonal(vals) * vec[(end-nstates+1):end,:]
H2new = U * H2 * U'
G = eigen(Hermitian(H2new))

nstates = length(G.values[G.values .< ϵ0^2])
if nstates < 2hof.l2  # incomplete basis at this flux
    println("Incomplete basis generated by MTG")
end
println("Total number of states kept stage 2 is $nstates")
nstates = 2hof.l2
# keep 82 states nontheless
# nstates=2hof.l2
# further downprojection for Hamiltonian
Unew = G.vectors[:,1:nstates];
Hnew = Unew' * (U * H * U') * Unew;
ϵ = eigvals(Hermitian(Hnew));



##
fig,ax = subplots(1,2,figsize=(6,4))
ax[1].plot(F.values,"r.",ms=2)
ax[1].axvline(length(F.values)-2hof.l2+1)

ax[2].plot(G.values,"b.",ms=2)
ax[2].plot(sort(ϵ.^2),"g.",ms=2)
ax[2].axvline(2hof.l2)
ax[2].axhline(ϵ0^2)
ax[2].set_ylim([0,0.1])
# ax[2].set_xlim([0,100])
display(fig)
# savefig("Q$(q)P$(p).pdf")
close(fig)


##
# real space profile of states generated by magnetic translation group
include(joinpath(fpath,"libs/MTGRealSpace.jl"))
# mtg_R = computeMTGRealSpace(hof,params,blk,basis);
plotMTGRealSpace(mtg_R,params)